"""
1 Отсортируйте по убыванию методом пузырька одномерный целочисленный массив, заданный случайными числами на промежутке
  [-100; 100). Выведите на экран исходный и отсортированный массивы.
  Примечания:
● алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
● постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком. Улучшенные версии
  сортировки, например, расчёской, шейкерная и другие в зачёт не идут.
"""
from random import randint


# массив случайных целых чисел размером size в интервале [start_inc, end_exc)
def rnd_arr(start_inc, end_exc, size):
    return [randint(start_inc, end_exc - 1) for _ in range(size)]


# сортировка пузырьком
def bubble_sort(array):
    _LEN = len(array)
    n = 1
    while n < _LEN:
        for i in range(_LEN - n):
            if array[i] > array[i + 1]:
                array[i], array[i + 1] = array[i + 1], array[i]
        n += 1


arr = rnd_arr(-100, 100, 10)
print(f'Исходный массив:           {arr}')
bubble_sort(arr)
print(f'Отсортиртированный массив: {arr}')

"""
Улучшения:
1) В строке 22 заменил -1 на -n, таким образом отсортированный хвост массива во внутреннем цикле повторно не 
   анализируется, как это было в первоначальном варианте.
2) все вызовы len(array) заменил переменной _LEN. Предыдущая практика урока с timeit и cProfile показала  
   эффективность такого решения.
"""
